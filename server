#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>


///////////////////////////////////////////
////  FUNZIONI
///////////////////////////////////////////

int register_users(int client, char *pass_serv);
int opzioni(int client);
void scansiona(char *path_da_scansionare);

///////////////////////////////////////////


int main(){
	
	int serv_sock, client_sock, len;
	int time_to_exit1=0, time_to_exit2=0;
	struct sockaddr_in s, c;
	char password_server1[100];
	char password_server2[100];
	int esito, scelta_client;
	
	printf("\n---SERVER---\n\n");
	printf("Inserisci una password. Con questa password i client potranno connettersi.\n");
	while(time_to_exit1==0){
		printf("Nuova password: ");
		scanf("%s", password_server1);
		printf("Conferma password: ");
		scanf("%s", password_server2);
		if(strcmp(password_server1, password_server2)==0){
			printf("Password '%s' confermata.\n\n", password_server1);
			time_to_exit1=1;
		}else
			printf("Le due password non coincidono. Riprova.\n");
	}
	serv_sock=socket(AF_INET, SOCK_STREAM, 0);
	if(serv_sock==-1){
		perror("Error creating socket.\n");
		exit(1);
	}
	s.sin_family=AF_INET;
	s.sin_port=htons(11111);
	s.sin_addr.s_addr=INADDR_ANY;
	if(bind(serv_sock, (struct sockaddr*)&s, sizeof(s))==-1){
		perror("Errore bind.\n");
		exit(1);
	}
	listen(serv_sock, 5);
	while(time_to_exit2==0){
		len=sizeof(c);
		printf("\nAttendo connessione da qualche client...\n");
		client_sock=accept(serv_sock, (struct sockaddr*)&c, &len);
		if(client_sock==-1){
			perror("Errore accept.\n");
			exit(1);
		}
		printf("\nConnessione stabilita col client.\nFase di identificazione...\n");
		sleep(1);
		
		esito=register_users(client_sock, password_server1);
		if(esito==0){}
		else{
			printf("Mostro le opzioni al client...\n");
			scelta_client=opzioni(client_sock);
			printf("Scelta client: %d\n", scelta_client);
			switch(scelta_client){
				default:
				printf("Il comando inserito non corrisponde a nessuna azione.\n");
				break;
				case 1:
				printf("Hai scelto: Trova file dato un path.\n");
				break;
				case 2:
				printf("Hai scelto: Visualizza contenuto directory.\n");
				break;
				case 3:
				printf("Hai scelto: ...\n");
				break;
				case 4:
				printf("Hai scelto: ...\n");
				break;
			}
		}
		
		
	
	}
	close(serv_sock);
	exit(0);
	

}

/////////////////////////////////////////
///////  FUNZIONI
/////////////////////////////////////////


int register_users(int client, char *pass_serv){
	
	char utente_client[100];
	char password_client[100];
	char st[100]="Inserisci un username: ";
	
	write(client, st, sizeof(st));
	write(client, "Inserisci una password: ", 24);
	read(client, utente_client, 100);//ricevo us e pass
	read(client, password_client, 100);
	if(strcmp(pass_serv, password_client)!=0){
		printf("La password inserita dal client risulta errata.\n\n");
		write(client, "Connessione rifiutata: password errata.", 39);
		return 0;
	}
	else{
		printf("La password inserita dal client risulta corretta.\nUtente '%s' connesso al server.\n\n", utente_client);
		write(client, "Connessione accettata.", 22);	
		return 1;
	}
}


int opzioni(int client){
	int scelta;
	write(client, "\nBenvenuto del menu' principale del server.\n\n1 - Cerca file dato un path\n2 - Visualizza contenuto directory\n3 - ...\n4 - ...\n\n", 150);
	write(client, "Inserisci il comando da eseguire: ", 34);
	read(client, &scelta, sizeof(int));
	return scelta;
	
}
